---
// FloatingHearts.astro
// 컴포넌트 속성 정의 (필요시 커스터마이징 가능)
interface Props {
  heartCount?: number;
  heartColor?: string;
  heartSize?: number;
}

// 기본값 적용
const { heartCount = 8, heartColor = "#ff4d6b", heartSize = 24 } = Astro.props;

const FIXED_HEART_COUNT = 10;
const HEART_COLOR = "#ff4d6b";
const HEART_SIZE = 24; // 모든 하트의 크기를 통일(px)

// 하트 위치 및 애니메이션 속성을 미리 생성
const hearts = Array.from({ length: FIXED_HEART_COUNT }).map((_, index) => {
  return {
    // 화면 전체에 골고루 배치
    startX: Math.random() * 100, // 가로 위치 (%)
    startY: Math.random() * 100, // 세로 위치 (%)
    delay: Math.random() * 2, // 최소한의 지연만 적용 (초)
    duration: 6 + Math.random() * 6, // 더 빠른 애니메이션 (6-12초)
    floatDirection: Math.random() > 0.5 ? "direction1" : "direction2", // 떠다니는 방향
    rotateStart: -10 + Math.random() * 20, // 초기 회전 각도
    scale: 0.8 + Math.random() * 0.4, // 크기 변화 (0.8~1.2)
  };
});
---

<div class="floating-hearts-container">
  {
    hearts.map((heart, index) => (
      <div
        class={`heart ${heart.floatDirection}`}
        style={`
        left: ${heart.startX}%;
        top: ${heart.startY}%;
        animation-delay: ${heart.delay}s;
        animation-duration: ${heart.duration}s;
        transform: rotate(${heart.rotateStart}deg) scale(${heart.scale});
      `}
      >
        <svg
          width={HEART_SIZE}
          height={HEART_SIZE}
          viewBox="0 0 24 24"
          fill={HEART_COLOR}
        >
          <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
        </svg>
      </div>
    ))
  }
</div>

<style>
  .floating-hearts-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    pointer-events: none; /* 클릭 이벤트 통과 */
    z-index: 10; /* 필요에 따라 조정 */

    .heart {
      position: absolute;
      width: var(--heart-size, 24px);
      height: var(--heart-size, 24px);
      opacity: 0.2; /* 처음부터 보이도록 설정 */
    }
  }

  .direction1 {
    animation: float-direction1 8s ease-in-out infinite;
  }

  .direction2 {
    animation: float-direction2 10s ease-in-out infinite;
  }

  @keyframes float-direction1 {
    0% {
      transform: translate(0, 0) scale(1) rotate(0deg);
    }
    25% {
      transform: translate(15%, 10%) scale(1.2) rotate(15deg);
    }
    50% {
      transform: translate(-10%, -15%) scale(0.9) rotate(-15deg);
    }
    75% {
      transform: translate(12%, -8%) scale(1.1) rotate(10deg);
    }
    100% {
      transform: translate(0, 0) scale(1) rotate(0deg);
    }
  }

  @keyframes float-direction2 {
    0% {
      transform: translate(0, 0) scale(1) rotate(0deg);
    }
    25% {
      transform: translate(-12%, 15%) scale(0.9) rotate(-20deg);
    }
    50% {
      transform: translate(15%, -10%) scale(1.2) rotate(12deg);
    }
    75% {
      transform: translate(-8%, -12%) scale(0.95) rotate(-10deg);
    }
    100% {
      transform: translate(0, 0) scale(1) rotate(0deg);
    }
  }
</style>
